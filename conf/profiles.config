// Resource profiles

	profiles {

		// Local test profile

		standard {
			executor.name           = 'local'
			executor.cpus           = 8
			executor.memory         = 16.GB
			process {
				resourceLimits = [
					cpus: 8,
					memory: '16.GB',
					time: '1.h'
				]
				withLabel: process_single {
					cpus = 1
					memory = 1.GB
				}
				withLabel: process_low {
					cpus = 2
					memory = 2.GB
				}
				withLabel: process_medium {
					cpus = 3
					memory = 4.GB
				}
				withLabel: process_high {
					cpus = 5
					memory = 8.GB
				}
			}
		}

		// Resource profiles for HPC environments

		baseHPC {
			// Based on nf-core base
			executor {
				name = 'slurm'
				account = params.account
				jobName = { "${task.name.tokenize(':')[-1].replaceAll(/[^a-zA-Z0-9]/, '_')}_${task.hash.take(10)}".replaceAll(/_+/, '_') }
				queueSize = 1000
			}
			process {
				cpus   = { 1      * task.attempt }
				memory = { 6.GB   * task.attempt }
				time   = { 4.h    * task.attempt }
				errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
				maxRetries    = 1
				maxErrors     = '-1'
				withLabel:process_single {
					cpus   = { 1                   }
					memory = { 6.GB * task.attempt }
					time   = { 4.h  * task.attempt }
				}
				withLabel:process_low {
					cpus   = { 2     * task.attempt }
					memory = { 12.GB * task.attempt }
					time   = { 4.h   * task.attempt }
				}
				withLabel:process_medium {
					cpus   = { 6     * task.attempt }
					memory = { 36.GB * task.attempt }
					time   = { 8.h   * task.attempt }
				}
				withLabel:process_high {
					cpus   = { 12    * task.attempt }
					memory = { 72.GB * task.attempt }
					time   = { 16.h  * task.attempt }
				}
				withLabel:process_long {
					time   = { 20.h  * task.attempt }
				}
				withLabel:process_high_memory {
					memory = { 200.GB * task.attempt }
				}
				withLabel:error_ignore {
					errorStrategy = 'ignore'
				}
				withLabel:error_retry {
					errorStrategy = 'retry'
					maxRetries    = 2
				}
			}
		}

		dardelSlurm {
			containerOptions = "-B /cfs/klemming/"
			executor {
				name = 'slurm'
				account = params.account
				jobName = { "${task.name.tokenize(':')[-1].replaceAll(/[^a-zA-Z0-9]/, '_')}_${task.hash.take(10)}".replaceAll(/_+/, '_') }
				queueSize = 1000
			}
			process {
				errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'terminate' }
				maxRetries = 2
				resourceLimits = [
					memory: 1790.GB,
					cpus: 128,
					time: 7.d
				]
				withLabel: process_single {
					queue = 'shared'
					cpus = 1
					time = { 5.h * task.attempt }
				}
				withLabel: process_low {
					queue = 'shared'
					cpus = 16
					memory = { 40.GB * task.attempt }
					time = { 8.h * task.attempt }
				}
				withLabel: process_medium {
					queue = 'main'
					clusterOptions = '--nodes=1'
					cpus = 64
					memory = { 230.GB * task.attempt }
					time = { 12.h * task.attempt }
				}
				withLabel: process_high {
					queue = 'memory'
					clusterOptions = '--nodes=1'
					cpus = 64
					memory = { 1000.GB * task.attempt }
					time = { 24.h * task.attempt }
				}
			}
		}

		rackhamSlurm {
			apptainer {
				envWhitelist = 'SNIC_TMP'
			}
			executor {
				name = 'slurm'
				account = params.account
				jobName = { "${task.name.tokenize(':')[-1].replaceAll(/[^a-zA-Z0-9]/, '_')}_${task.hash.take(10)}".replaceAll(/_+/, '_') }
				queueSize = 1000
			}
			process {
				errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'terminate' }
				maxRetries = 2
				scratch = '$SNIC_TMP'
				resourceLimits = [
						memory: 1000.GB,
						cpus: 20,
						time: 10.d
				]
				withLabel: process_single {
					queue = 'core'
					cpus = 1
					memory = 8.GB
					time = { 12.h * task.attempt }
				}
				withLabel: process_low {
					queue = 'core'
					cpus = 4
					memory = { 24.GB * task.attempt }
					time = { 12.h * task.attempt }
				}
				withLabel: process_medium {
					queue = 'core'
					cpus = 10
					memory = { 64.GB * task.attempt }
					time = { 24.h * task.attempt }
				}
				withLabel: process_high {
					queue = 'node'
					clusterOptions = '--nodes=1'
					cpus = 20
					memory = { 540.GB * task.attempt }
					time = { 24.h * task.attempt }
				}
			}
		}

	}
