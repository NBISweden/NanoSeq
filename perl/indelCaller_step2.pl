#!/usr/bin/perl -w

# * Perl script
#     * Read all the indels, group by read bundle, mark sites in read bundles where we would believe an indel
#         * Add for each site if it is masked or not - when a final event overlaps a masked site, remove
#         * Reformat read bundle names to: RB:Z:1,11373,11754,GCT,TTA
#     * Extract read bundles from bam to create mini bam
#         * Remove duplicate flag
#     * samtools + bcftools to call indels
#     * read vcf output and decide which are ok and if no indel is called, warn!

use strict;
use Getopt::Long qw(:config no_ignore_case);
use Pod::Usage;
use File::Which;
use File::Temp qw/ tempfile tempdir /;
use File::Basename;
my $VERSION="1.0.0";

my %opts;
GetOptions('b|bam=s'   => \my $botseq_bam_file,
           'r|ref=s'   => \my $ref_genome,
           'o|out=s'   => \$opts{'o'},
           'k|keep'     => \$opts{'k'},
           'h|help'    => \$opts{'h'},
           'v|version' => \$opts{'v'},
) or pod2usage(2);
pod2usage(-verbose => 1) if(defined $opts{'h'});
if(defined $opts{'v'}) {
  print sprintf "VERSION: %s\n", $VERSION;
  exit 0;
  }
pod2usage(2) if( @ARGV != 1 );
die ("samtools not found in path\n") unless ( which 'samtools' );
die ("bcftools not found in path\n") unless ( which 'bcftools' );

die ("\nOutput prefix not defined\n") unless(defined $opts{'o'});
my $out_name = basename($opts{'o'});
my $out_dir = dirname($opts{'o'});
die ("\nMust define the reference\n") unless ( $ref_genome);
die ("\nReference $ref_genome not found\n") unless ( -e $ref_genome );

die ("\nMust a BAM file\n") unless ( $botseq_bam_file );
die ("\nBAM $botseq_bam_file not found\n") unless ( -e $botseq_bam_file );
die ("\nBAM index for $botseq_bam_file not found\n") unless ( -e $botseq_bam_file .".bai");

my $FILE = $ARGV[0];
die ("\nInput file $FILE not found\n") unless ( -e $FILE );
open(IN, "zcat $FILE |") or die( "\nProblem with gunzip $FILE\n" );

my $tempdir;
if ( defined $opts{'k'} ){
  $tempdir = tempdir("tmp.XXXXXXXX", DIR => $out_dir, CLEANUP=> 0);
} else {
  $tempdir = tempdir("tmp.XXXXXXXX", DIR => $out_dir, CLEANUP=> 1);
}

# Load indels:
my %indels;
my $counts;
while(<IN>) { # input bed files are generated by indelCaller.pl [step 1]

  next if ( /BULK_SEEN/ ); #filter if site comes from the bulk sample
	chomp;
	my($chr,$pos0,$pos1,$info)             = (split(/\t/,$_  ))[0,1,2,3]    ;
	my($rb_id,$dp,$qpos,$context,$sw,$snp) = (split(/;/,$info))[0,1,2,3,4,5];
	my @tmp = split(/[:\-\|]/,$rb_id);
	$"      = ",";
	$rb_id  = "@tmp";
	$sw     =~ s/SW=//;
	$snp    =~ s/cSNP=//;
	$indels{$rb_id}->{$pos1}->{"dp"     }  = $dp     ;
	$indels{$rb_id}->{$pos1}->{"qpos"   }  = $qpos   ;
	$indels{$rb_id}->{$pos1}->{"context"}  = $context;
	$indels{$rb_id}->{$pos1}->{"sw"     }  = $sw     ;
	$indels{$rb_id}->{$pos1}->{"snp"    }  = $snp    ;
	$counts++;
}
print STDERR "$counts indel sites seen\n";
print STDERR scalar(keys(%indels)), " readbundles with indels\n";

open(OUT, "| bcftools sort -O z -T $tempdir -o $out_dir/$out_name.vcf.gz -") || die "Failed to write to $out_name.final.vcf\n";
my $header = "";
my $vcf_content = "";
my $once = 1;
print STDERR "\ntmp dir : $tempdir\n\n";
foreach my $rb_id (keys %indels) {
	my($chr,$start,$end) = (split(/,/,$rb_id))[0,1,2];
	my(%good_sites,%bad_sites);
	foreach my $pos ( keys %{$indels{$rb_id}} ) {
		if($indels{$rb_id}->{$pos}->{"sw"} == 0 && $indels{$rb_id}->{$pos}->{"snp"} == 0) {
			$good_sites{$pos} = 1;
		} else {
			$bad_sites{$pos} = 0;
		}	
	}
	if(scalar(keys(%good_sites)) == 0) {
		next; # all indels overlap noisy or common SNP sites
	}
	$"=",";
	my @tmp = keys %{$indels{$rb_id}};
	my $positions = "@tmp";
  print STDERR "processing read bundle $rb_id ...\n"; 
  print STDERR "Step 1...\n";
  open(BAM_OUT," | samtools view -bo $tempdir/$out_name.tmp.bam -") or die("\nError running: samtools view -bo $tempdir/$out_name.tmp.bam - :$!\n");
  open(BAM,"samtools view -h $botseq_bam_file $chr:$start-$end | ") or die( "\nError running : samtools view -h $botseq_bam_file $chr:$start-$end : $!\n");
  while(<BAM>) {
    next unless ( /(RB:Z:$rb_id)|(^@)/);
    if ( /^@/ ) {
      print BAM_OUT $_;
    } else {
      my @fields = (split(/\t/,$_));
      $fields[1] = $fields[1] - 1024 if($fields[1] > 1024); #remove duplicate  flag
      print BAM_OUT join "\t",@fields; 
    }
  }
  close( BAM_OUT);

	print STDERR "Step 2...\n";
	system( "samtools index $tempdir/$out_name.tmp.bam" ) and die("\n Error running: samtools index $tempdir/$out_name.tmp.bam :$!\n");

	print STDERR "Step 3...\n";
	#`samtools mpileup --no-BAQ  -d 250 -m 2 -F 0.5 -r $chr:$start-$end --BCF --output-tags DP,DV,DP4,SP -f $ref_genome -o $tempdir/$out_name.bcf $tempdir/$out_name.tmp.bam`;
  system("bcftools mpileup --no-BAQ  -L 250 -m 2 -F 0.5 -r $chr:$start-$end -O b -a DP,DV,DP4,SP -f $ref_genome -o $tempdir/$out_name.bcf $tempdir/$out_name.tmp.bam") and die ("Error running: bcftools mpileup --no-BAQ  -L 250 -m 2 -F 0.5 -r $chr:$start-$end -O b -a DP,DV,DP4,SP -f $ref_genome -o $tempdir/$out_name.bcf $tempdir/$out_name.tmp.bam : $!\n");
  
	print STDERR "Step 4...\n";
	system( "bcftools index -f $tempdir/$out_name.bcf $tempdir/$out_name.indexed.bcf") and die("\n Error running: bcftools index -f $tempdir/$out_name.bcf $tempdir/$out_name.indexed.bcf : $!\n") ;

	print STDERR "Step 5...\n";
	system("bcftools call --ploidy 1 --skip-variants snps --multiallelic-caller --variants-only  -O v $tempdir/$out_name.bcf -o $tempdir/$out_name.tmp.vcf") and die ("\nError running: bcftools call --skip-variants snps --multiallelic-caller --variants-only  -O v $tempdir/$out_name.bcf -o $tempdir/$out_name.tmp.vcf : $!\n");

	print STDERR "Step 6...\n";
	system("bcftools norm -f $ref_genome $tempdir/$out_name.tmp.vcf > $tempdir/$out_name.tmp2.vcf") and die("\n Error running: bcftools norm -f $ref_genome $tempdir/$out_name.tmp.vcf > $tempdir/$out_name.tmp2.vcf : $!\n" );

	#print "$rb_id:$positions:\n";
	my $get_header = 0;
	if($header eq "") {
		$get_header = 1;
	}
	print STDERR "\nChecking result\n";
	open(IN_TMP, "<$tempdir/$out_name.tmp2.vcf") or die "Couldn't open $tempdir/$out_name.tmp2.vcf\n";
	while(<IN_TMP>) {
		if(/^#/) {
			if($get_header == 1) {
        #add info and filter fields to header
        if ($once and /^##FORMAT/){
          $_ = "##FILTER=<ID=MASKED,Description=\"Site overlaps with SW or SNP site\">\n" . $_;
          $_ = "##INFO=<ID=RB,Number=1,Type=String,Description=\"Readbundle ID\">\n" . $_ ;
          $once = 0;
        }
				print OUT $_;
				$header .= $_;
			}
			next;
		}
		print "RESULT: $_\n";
		my @fields = split(/\t/,$_);
		$fields[7] = "$fields[7];RB=$rb_id";
		$fields[6] = "PASS";
		# If there is overlap with SW or cSNP, flag it as MASKED
		for(my $i=$fields[1]; $i<= ($fields[1] + length($fields[3])); $i++) {
			if(exists($indels{$rb_id}->{$i}) && ($indels{$rb_id}->{$i}->{"sw"} == 1 || $indels{$rb_id}->{$i}->{"snp"} == 1)) {
				$fields[6] = "MASKED";
			}
		}
		print OUT join "\t",@fields;
	}
	close(IN_TMP);
}

close OUT;

__END__

=head1 NAME

indelCaller_step2.pl - Filter sites of interest to look for indels.

=head1 SYNOPSIS

indelCaller_step2.pl  [options] -r ref -b BAM -o prefix input.bed.gz

    -out               -o   Output prefix
    -ref               -r   reference
    -bam               -b   bam file

  Optional parameters:
    -keep              -k   Keep intermediate files
    -help              -h
    -version           -v

=head1 OPTIONS

=over 8

=item B<-out>

Output prefix. 
Final ouptput is a fileterd bed file.

=item B<-ref>

Reference file

=item B<-bam>

Original NanoSeq BAM for sample.

=item B<-keep>

Do not remove teporary intermediate directory.

=back

=cut
